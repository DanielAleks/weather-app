[{"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\index.tsx":"1","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\reportWebVitals.ts":"2","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\App.tsx":"3","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\top-info\\TopInfo.tsx":"4","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\bottem-daily\\BottomDaily.tsx":"5","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\bottem-daily\\nav\\Nav.tsx":"6","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\bottem-daily\\hourly\\Hourly.tsx":"7","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\index.tsx":"8","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\right-column\\DailyDesktop.tsx":"9","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\reusables\\daily\\Daily.tsx":"10","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\reusables\\daily\\daily-info\\DailyInfo.tsx":"11","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\bottom-column\\HourlyDesktop.tsx":"12","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\nav\\NavDesktop.tsx":"13","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\index.tsx":"14","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\LoadImages.ts":"15"},{"size":500,"mtime":1607295698333,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1607295698333,"results":"18","hashOfConfig":"17"},{"size":858,"mtime":1618217752272,"results":"19","hashOfConfig":"17"},{"size":731,"mtime":1616634590576,"results":"20","hashOfConfig":"17"},{"size":981,"mtime":1616716506999,"results":"21","hashOfConfig":"17"},{"size":2170,"mtime":1616716505063,"results":"22","hashOfConfig":"17"},{"size":939,"mtime":1616620015825,"results":"23","hashOfConfig":"17"},{"size":3926,"mtime":1616719822992,"results":"24","hashOfConfig":"17"},{"size":456,"mtime":1616630604298,"results":"25","hashOfConfig":"17"},{"size":828,"mtime":1616719017165,"results":"26","hashOfConfig":"17"},{"size":1493,"mtime":1616631227630,"results":"27","hashOfConfig":"17"},{"size":1792,"mtime":1616716674139,"results":"28","hashOfConfig":"17"},{"size":1576,"mtime":1616716559277,"results":"29","hashOfConfig":"17"},{"size":792,"mtime":1616716531348,"results":"30","hashOfConfig":"17"},{"size":33250,"mtime":1618217729151,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1efssuu",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\index.tsx",[],["67","68"],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\reportWebVitals.ts",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\App.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\top-info\\TopInfo.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\bottem-daily\\BottomDaily.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\bottem-daily\\nav\\Nav.tsx",["69","70"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport './nav.sass'\r\nimport '../../../desktop/nav/x-dropdown-menu.sass'\r\n\r\nfunction Nav({ setIsDaily, isDaily, city, setIsModal, setCity, weather, isModal, area, whichImage }) {\r\n  const inputRef = useRef()\r\n  const buttonRef = useRef()\r\n  const [x, setX] = useState(0)\r\n\r\n  const focusButton = (buttonRef) => {\r\n    buttonRef.current.focus()\r\n    setIsModal(false)\r\n  }\r\n\r\n  const focusInput = (inputRef) => {\r\n    inputRef.current.focus()\r\n    setIsModal(true)\r\n  }\r\n\r\n  const animateSwitch = () =>\r\n    x === 100 ? setX(x - 100) : setX(x + 100)\r\n\r\n  useEffect(() => {\r\n    focusInput(inputRef)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    whichImage()\r\n  }, [city])\r\n\r\n  return (\r\n    <div className='nav-omni-container' >\r\n      <div className='nav-container'>\r\n\r\n        <div className='setting-toggle-container'>\r\n          <p>{isDaily ? 'Daily' : 'Hourly'}</p>\r\n          <div onClick={() => {\r\n            setIsDaily(prev => !prev)\r\n            animateSwitch()\r\n          }} className='outer-box'>\r\n            <div\r\n              style={{ transition: 'transform 1s', transform: `translate(${x}%)` }}\r\n              className='inner-box' />\r\n          </div>\r\n        </div>\r\n\r\n        <input\r\n          type=\"text\"\r\n          value={city}\r\n          ref={inputRef}\r\n          onClick={() => setIsModal(true)}\r\n          className='long-input nav-input'\r\n          placeholder='Search a Location'\r\n          onChange={(e) => setCity(e.target.value)}\r\n        />\r\n        <button className='nav-button'\r\n          ref={buttonRef}\r\n          onClick={() => {\r\n            weather()\r\n            setIsModal(false)\r\n          }}>Search</button>\r\n\r\n        <div className='input-dropdown'>\r\n          {area.length >= 3 && isModal &&\r\n            area.map((item) =>\r\n              <div onClick={() => {\r\n                setCity(item.name)\r\n                weather()\r\n                focusButton(buttonRef)\r\n              }}\r\n                className='possible-locations-btn'>\r\n                {item.name}\r\n              </div>\r\n            )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\mobile\\bottem-daily\\hourly\\Hourly.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\index.tsx",["71","72","73","74","75","76"],"import React, { useEffect, useState } from 'react';\r\nimport BottomDaily from './mobile/bottem-daily/BottomDaily';\r\nimport TopInfo from './mobile/top-info/TopInfo';\r\nimport DailyDesktop from './desktop/right-column/DailyDesktop';\r\nimport HourlyDesktop from './desktop/bottom-column/HourlyDesktop';\r\nimport NavDesktop from './desktop/nav/NavDesktop';\r\nimport './index.sass'\r\nimport Desktop from './desktop';\r\n\r\nfunction useWindowSize() {\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n    window.addEventListener(\"resize\", handleResize);\r\n    handleResize();\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n\r\nfunction Index({ city, setCity, imageState, whichImage }) {\r\n  const size = useWindowSize()\r\n  const [weatherLocation, setWeatherLocation]: any = useState([])\r\n  const [weatherCurrent, setWeatherCurrent]: any = useState([])\r\n  const [area, setArea]: any = useState([])\r\n  const [weatherForecast, setWeatherForecast]: any = useState([])\r\n  const [isDaily, setIsDaily] = useState(true)\r\n  const [isModal, setIsModal] = useState(false)\r\n  const [accessor, setAccessor] = useState(1)\r\n\r\n  const accessorLimits = () => {\r\n    if (accessor === - 1) {\r\n      setAccessor(0)\r\n    } else if (accessor === 3) {\r\n      setAccessor(2)\r\n    }\r\n  }\r\n\r\n  const YOUR_API_KEY = '32902a43900f400cae0210316210701'\r\n  const commonNames = `https://api.weatherapi.com/v1/search.json?key=${YOUR_API_KEY}&q=${city}`\r\n  const current = `https://api.weatherapi.com/v1/current.json?key=${YOUR_API_KEY}&q=${city}`\r\n  const weekThree = `https://api.weatherapi.com/v1/forecast.json?key=${YOUR_API_KEY}&q=${city}&days=7`\r\n\r\n  async function weather() {\r\n    const fetchedWeatherData = await fetch(current)\r\n    const data = await fetchedWeatherData.json()\r\n    setWeatherLocation(data.location)\r\n    setWeatherCurrent(data.current)\r\n  }\r\n  async function places() {\r\n    const fetchedWeatherData = await fetch(commonNames)\r\n    const data = await fetchedWeatherData.json()\r\n    setArea(data)\r\n  }\r\n\r\n  async function weatherForcast() {\r\n    const fetchedWeatherData = await fetch(weekThree)\r\n    const data = await fetchedWeatherData.json()\r\n    setWeatherForecast(data.forecast && data.forecast.forecastday)\r\n  }\r\n\r\nuseEffect(() => {\r\n  weather()\r\n  places()\r\n  weatherForcast()\r\n  whichImage()\r\n}, [city])\r\n\r\n  useEffect(() => {\r\n    accessorLimits()\r\n  }, [accessor])\r\n\r\n  return (\r\n    <div className='project-container'>\r\n      <div className='bg-main-index' >\r\n\r\n        <img className='dynamic-image' src={imageState} />\r\n\r\n        <TopInfo\r\n          weatherLocation={weatherLocation}\r\n          weatherCurrent={weatherCurrent}\r\n        />\r\n        {size.width < 1000 &&\r\n          <BottomDaily\r\n            city={city}\r\n            setIsModal={setIsModal}\r\n            setCity={setCity}\r\n            weather={weather}\r\n            isModal={isModal}\r\n            area={area}\r\n            whichImage={whichImage}\r\n            setIsDaily={setIsDaily}\r\n            accessor={accessor}\r\n            setAccessor={setAccessor}\r\n            isDaily={isDaily}\r\n            weatherForecast={weatherForecast}\r\n          />\r\n        }\r\n\r\n        {size.width > 1000 &&\r\n          <>\r\n            <Desktop\r\n              whichImage={whichImage}\r\n              area={area}\r\n              weather={weather}\r\n              setCity={setCity}\r\n              city={city}\r\n              setIsModal={setIsModal}\r\n              isModal={isModal}\r\n              weatherForecast={weatherForecast}\r\n              accessor={accessor}\r\n              setAccessor={setAccessor}\r\n            />\r\n\r\n          </>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Index\r\n","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\right-column\\DailyDesktop.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\reusables\\daily\\Daily.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\reusables\\daily\\daily-info\\DailyInfo.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\bottom-column\\HourlyDesktop.tsx",["77","78"],"import React, { useState } from 'react'\r\nimport { IoIosArrowForward, IoIosArrowBack } from 'react-icons/io'\r\nimport { FaArrowAltCircleLeft, FaArrowAltCircleRight } from 'react-icons/fa'\r\nimport './hourly-desktop.sass'\r\n\r\nfunction HourlyDesktop({ weatherForecast }) {\r\n  const [x, setX] = useState(-35)\r\n\r\n  const time = [\r\n    '12AM', '1AM', '2AM', '3AM', '4AM', '5AM',\r\n    '6AM', '7AM', '8AM', '9AM', '10AM', '11AM',\r\n    '12PM', '1PM', '2PM', '3PM', '4PM', '5PM',\r\n    '6PM', '7PM', '8PM', '9PM', '10PM', '11PM'\r\n  ]\r\n\r\n  const onRightHandler = () =>\r\n    x < -70 ? setX(x) : setX(x - 10)\r\n  const onLeftHandler = () =>\r\n    x > 0 ? setX(x) : setX(x + 10)\r\n\r\n  return (\r\n    <div className='hourlyD-container'>\r\n      <div className='hourlyD-bg' />\r\n\r\n      <div className='hourly-huge-arrows'>\r\n        <FaArrowAltCircleLeft className='back-arrow'\r\n          size={80} color='#F1C502'\r\n          onClick={onLeftHandler} \r\n        />\r\n        <FaArrowAltCircleRight className='forward-arrow'\r\n          size={80} color='#F1C502'\r\n          onClick={onRightHandler}\r\n        />\r\n      </div>\r\n      <hr style={{width: '100%', position: 'absolute', top: '5.5rem'}} color='white' />\r\n\r\n      <div className='hourlyD-outer-container'\r\n        style={{ transition: 'transform 1s' ,transform: `translateX(${x}%)` }}\r\n      >\r\n        {weatherForecast && weatherForecast[0]?.hour.map((item, id) =>\r\n          <div className='hourlyD-inner-container'>\r\n            <p className='D-time'>{time[id]}</p>\r\n            <hr className='hourlyD-hr' color='white' />\r\n            <img className='D-icon' src={item.condition.icon} alt=\"weather-icon\" />\r\n            <p className='D-temp'>{item.temp_f}F°</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HourlyDesktop\r\n","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\nav\\NavDesktop.tsx",["79","80","81"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport './nav-desktop.sass'\r\nimport './x-dropdown-menu.sass'\r\nimport './x-search.sass'\r\n\r\nfunction NavDesktop({ isModal, setIsModal, city, setCity, weather, area, whichImage }) {\r\n\r\n  const inputRef = useRef()\r\n  const buttonRef = useRef()\r\n\r\n  const focusButton = (buttonRef) => {\r\n    buttonRef.current.focus()\r\n    setIsModal(false)\r\n  }\r\n\r\n  const focusInput = (inputRef) => {\r\n    inputRef.current.focus()\r\n    setIsModal(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    focusInput(inputRef)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    whichImage()\r\n  }, [city])\r\n\r\n  return (\r\n    <div className='navD'>\r\n\r\n      {area.length <= 3 &&\r\n        <p className='error-length'>not enough letters</p>}\r\n      <input\r\n        type=\"text\"\r\n        value={city}\r\n        ref={inputRef}\r\n        onClick={() => setIsModal(true)}\r\n        className='long-input'\r\n        placeholder='Search a Location'\r\n        onChange={(e) => {\r\n          setCity(e.target.value)\r\n        }} />\r\n      <button ref={buttonRef} onClick={() => {\r\n        weather()\r\n        setIsModal(false)\r\n      }}>Search</button>\r\n\r\n      <div className='input-dropdown'>\r\n        {area.length >= 3 && isModal &&\r\n          area.map((item) =>\r\n            <div onClick={() => {\r\n              setCity(item.name)\r\n              weather()\r\n              focusButton(buttonRef)\r\n            }}\r\n              className='possible-locations-btn'>\r\n              {item.name}\r\n            </div>\r\n          )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavDesktop\r\n","C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\new-components\\desktop\\index.tsx",[],"C:\\Users\\denni\\Documents\\code\\React\\weatherApp\\src\\LoadImages.ts",["82","83","84","85"],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":25,"column":6,"nodeType":"92","endLine":25,"endColumn":8,"suggestions":"93"},{"ruleId":"90","severity":1,"message":"94","line":29,"column":6,"nodeType":"92","endLine":29,"endColumn":12,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":20},{"ruleId":"96","severity":1,"message":"100","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":21},{"ruleId":"96","severity":1,"message":"101","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":18},{"ruleId":"90","severity":1,"message":"102","line":77,"column":4,"nodeType":"92","endLine":77,"endColumn":10,"suggestions":"103"},{"ruleId":"90","severity":1,"message":"104","line":81,"column":6,"nodeType":"92","endLine":81,"endColumn":16,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":87,"column":9,"nodeType":"108","endLine":87,"endColumn":59},{"ruleId":"96","severity":1,"message":"109","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":27},{"ruleId":"96","severity":1,"message":"110","line":2,"column":29,"nodeType":"98","messageId":"99","endLine":2,"endColumn":43},{"ruleId":"96","severity":1,"message":"111","line":1,"column":36,"nodeType":"98","messageId":"99","endLine":1,"endColumn":44},{"ruleId":"90","severity":1,"message":"91","line":23,"column":6,"nodeType":"92","endLine":23,"endColumn":8,"suggestions":"112"},{"ruleId":"90","severity":1,"message":"94","line":27,"column":6,"nodeType":"92","endLine":27,"endColumn":12,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":398,"column":5,"nodeType":"116","messageId":"117","endLine":398,"endColumn":20},{"ruleId":"114","severity":1,"message":"115","line":400,"column":5,"nodeType":"116","messageId":"117","endLine":401,"endColumn":162},{"ruleId":"114","severity":1,"message":"115","line":482,"column":5,"nodeType":"116","messageId":"117","endLine":482,"endColumn":19},{"ruleId":"114","severity":1,"message":"115","line":484,"column":5,"nodeType":"116","messageId":"117","endLine":485,"endColumn":147},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'focusInput'. Either include it or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'whichImage'. Either include it or remove the dependency array. If 'whichImage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["121"],"@typescript-eslint/no-unused-vars","'DailyDesktop' is defined but never used.","Identifier","unusedVar","'HourlyDesktop' is defined but never used.","'NavDesktop' is defined but never used.","React Hook useEffect has missing dependencies: 'places', 'weather', 'weatherForcast', and 'whichImage'. Either include them or remove the dependency array. If 'whichImage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["122"],"React Hook useEffect has a missing dependency: 'accessorLimits'. Either include it or remove the dependency array.",["123"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'IoIosArrowForward' is defined but never used.","'IoIosArrowBack' is defined but never used.","'useState' is defined but never used.",["124"],["125"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"126","fix":"134"},{"desc":"128","fix":"135"},"Update the dependencies array to be: [focusInput]",{"range":"136","text":"137"},"Update the dependencies array to be: [city, whichImage]",{"range":"138","text":"139"},"Update the dependencies array to be: [city, places, weather, weatherForcast, whichImage]",{"range":"140","text":"141"},"Update the dependencies array to be: [accessor, accessorLimits]",{"range":"142","text":"143"},{"range":"144","text":"137"},{"range":"145","text":"139"},[663,665],"[focusInput]",[714,720],"[city, whichImage]",[2562,2568],"[city, places, weather, weatherForcast, whichImage]",[2621,2631],"[accessor, accessorLimits]",[553,555],[604,610]]